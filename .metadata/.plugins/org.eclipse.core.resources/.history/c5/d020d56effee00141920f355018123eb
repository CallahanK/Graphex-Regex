package graphex;

import java.util.*;

public class NFANode {

	public final static String EPSILON = "\u03B5";
	
	public Map<String,HashSet<NFANode>> transitionStates = new HashMap<String,HashSet<NFANode>>();
	public Boolean acceptState = false;
	
	
	public NFANode(){
		//TODO
	}
	
	//For single char transition
	public NFANode(String charTransition){
		//NFANode start = new NFANode();
		NFANode accept = new NFANode();
		
		HashSet<NFANode> set = new HashSet<NFANode>();
		set.add(accept);
		
		this.transitionStates.put(charTransition, set);
		accept.acceptState = true;
		
	}
	
	
	public NFANode makeStar(NFANode starStart){
		
		//Set<NFANode> allNodes = new HashSet<NFANode>( starStart.transitionStates.values() );
		
		NFANode newStart = new NFANode(EPSILON);
		
		
		return null;
	}
	
	public static Set<NFANode> getNFANodes(NFANode head){
		Set<NFANode> nodeSet = new HashSet<NFANode>();
		
		getNodes(head,nodeSet);
		
		return nodeSet;
	}
	
	private static void getNodes(NFANode node, Set<NFANode> set){
		
		if( set.add(node)){
			//Recurse children
			NFANode[] nextNodes = node.transitionStates.values().toArray(new NFANode[10]);
			
			for(int i =0; i<nextNodes.length;i++){
				getNodes(nextNodes[i],set);
			}
			
			
			/*while(nextNodes.hasNext()){
				getNodes( nextNodes.next().,set);
			}*/
		}
		
	}
	
	
}
